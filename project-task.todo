Project Setup:
  ✓ create basic html page with minor css @done(30 Oct 2024 07:30)
  ✓ running project on local web server
  ✓ add phaser 3 library @done(30 Oct 2024 07:35)
  ✓ create a basic phaser 3 game instance @done(30 Oct 2024 07:40)
  ✓ add jsconfig to get phaser 3 types and intellisense @done(30 Oct 2024 07:45)

Game Project Assets:
  ✓ download game assets and add to project @done(30 Oct 2024 07:50)
  ✓ show links to where assets can be found @done(30 Oct 2024 07:50)

Battle System:
  ✓ load game assets @done(30 Oct 2024 07:55)
  ✓ create battle scene layout @done(2 Nov 2024 13:06)
  ✓ create dialog menu @done(2 Nov 2024 19:09)
  ✓ create option menu @done(2 Nov 2024 19:09)
  ✓ create monster attack move list @done(3 Nov 2024 07:50)
  ✓ handle player input @done(9 Nov 2024 09:40)
  ✓ code optimization - move logic to components @done(10 Nov 2024 10:10)
    ✓ create health component @done(9 Nov 2024 12:28)
    ✓ create background component @done(9 Nov 2024 10:55)
    ✓ create monster components @done(10 Nov 2024 10:10)
  ✓ adding basic attack logic @done(10 Nov 2024 11:51)
  ✓ taking damage and monster knock out @done(10 Nov 2024 11:51)
  ✓ battle state machine @done(11 Nov 2024 13:34)
    ✓ what is a finite state machine @done(11 Nov 2024 13:34)
    ✓ review the battle states and what each one represents @done(11 Nov 2024 13:34)
    ✓ implement each state @done(11 Nov 2024 13:34)
    ✓ add item, flee, and monster states @done(11 Nov 2024 13:34)
    ✓ player input improvements @done(11 Nov 2024 14:22)
  ✓ battle scene polish @done(13 Nov 2024 06:03)
    ✓ text animations @done(11 Nov 2024 18:29)
    ✓ monster animations @done(11 Nov 2024 19:53)
    ✓ skip animations @done(11 Nov 2024 20:31)
    ✓ attack animations @done(13 Nov 2024 06:03)
    ✓ scene transitions @done(13 Nov 2024 06:03)
    ✓ custom fonts @done(12 Nov 2024 12:59)

World Scene:
  ✓ load level background @done(13 Nov 2024 09:00)
  ✓ create player @done(13 Nov 2024 09:00)
  ✓ handle player input @done(13 Nov 2024 09:00)
  ✓ camera movement @done(14 Nov 2024 08:33)
  ✓ handle grid based movement @done(14 Nov 2024 07:43)
  ☐ handle collisions
  ☐ add wild monster encounter logic
  ☐ store player position in data manager

Level Development With Tiled:
  ☐ Basic level design concepts
  ☐ Add collision layer
  ☐ Add custom types to Tiled
  ☐ Add game objects
  ☐ Add npcs
  ☐ Exporting level images and JSON

World Scene Part 2:
  ☐ add interactive game objects
  ☐ dialog ui component
  ☐ add npcs
  ☐ add npc dialog
  ☐ add npc movement

Title Screen:
  ☐ create basic title screen
  ☐ add options menu
  ☐ save & loading options
  ☐ connecting option data to battle scene

Bug Fixes Part 1:
  ☐ battle scene - health bar value when battle starts
  ☐ health bar - animation when value of delay is provided
  ☐ battle scene - at battle start player can provide input
  ☐ world scene - player movement, handle when only sprite direction changes

Tools Part 1:
  ☐ using tweakpane for testing
    ☐ tweakpane basics
    ☐ positioning game objects
    ☐ monster attacks
    ☐ animations
  ☐ util function for moving game objects

Saving & Loading:
  ☐ add game menu with option to save game
  ☐ update menu scene with continue option to load game
  ☐ on new game, we should reset the player data (pos, monsters, etc)

Monster Party & Monster Detail Scenes:
  ☐ create monster party scene
  ☐ allow player to select a monster in the scene
  ☐ create monster detail scene
  ☐ connect monster detail scene to monster party scene
  ☐ add game menu option for viewing monster party scene

Inventory:
  ☐ create class for items and inventory
  ☐ create ui screen for viewing items
  ☐ update menu to have view bag option
  ☐ update data manager to allow saving of inventory items
  ☐ update ui screen to allow player to use items

Battle Scene Part 2:
  ☐ using items
  ☐ running away
  ☐ enemy random attack
  ☐ player faint
  ☐ attacking order
  ☐ update data manager to persist monster data and current stats
  ☐ dynamic monster data based on player party and encounter

Audio:
  ☐ adding background music
  ☐ adding battle music
  ☐ adding attack effects
  ☐ connecting audio options to settings

World Scene Part 3:
  ☐ advanced wild monster encounter logic
  ☐ buildings
  ☐ items in the field
  ☐ npc event data structure
  ☐ respawn next to npc

Leveling & Experience:
  ☐ review math for leveling and exp gain
  ☐ update monseters json file and types to include exp info
  ☐ add new assets for exp bar
  ☐ refactor hp bar into re-usable class
  ☐ update battle scene to display exp bar
  ☐ update monster details scene to display exp bar
  ☐ gain exp when battle is over
    ☐ add new battle state for tracking
    ☐ new leveling utils for updates
    ☐ update monster classes to support
    ☐ update battle menu ui to have wordwrap

Multiple Monsters:
  ☐ load new assets
  ☐ battle scene
    ☐ battle monster class
      ☐ add support for switching monster details
    ☐ player battle monster class
      ☐ add support for switching monster details
      ☐ update deatch animation to hide health bar components
    ☐ battle menu
      ☐ update switch monster logic to align with flee attempt
    ☐ battle scene
      ☐ new state for switching monsters and scene resume logic
      ☐ update existing states to support switching active monster
      ☐ update existing logic for switching monster when active monster is knocked out
      ☐ update logic tied to exp gain and message ordering
      ☐ add ui to show number of monsters in party
    ☐ monster party scene
      ☐ add support for selecting monster for switching active monster during battle
  ☐ world scene
    ☐ refactor world menu into reusable component
    ☐ create confirmation sub menu
    ☐ switch monsters positions in party
    ☐ release monster into the wild

-------------------------------

Possible Future Content:
  ☐ cutscenes
  ☐ in game events and tracking
  ☐ shops
  ☐ battle npcs
  ☐ monster encyclopedia
  ☐ monster league/gyms

-------------------------------
☐ ✔ ✘
-------------------------------
